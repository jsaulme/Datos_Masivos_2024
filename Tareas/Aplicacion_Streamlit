{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMSAgKizoKa3wrSg/lcHk2n",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jsaulme/Datos_Masivos_2024/blob/main/Tareas/Aplicacion_Streamlit\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import the emoji module\n",
        "import pandas as pd\n",
        "import streamlit as st\n",
        "import yfinance\n",
        "import time\n",
        "import streamlit.components.v1 as stc\n",
        "#import translations\n",
        "\n",
        "@st.cache_data\n",
        "def load_data():\n",
        "    components = pd.read_html('https://en.wikipedia.org/wiki/List_of_S'\n",
        "                    '%26P_500_companies')[0]\n",
        "    # Check if 'SEC filings' column exists before dropping\n",
        "    if 'SEC filings' in components.columns:\n",
        "        components = components.drop('SEC filings', axis=1)\n",
        "    #If SEC filings is not found, the components DataFrame remains as is\n",
        "    return components.set_index('Symbol')\n",
        "\n",
        "@st.cache_resource\n",
        "def load_quotes(asset):\n",
        "    return yfinance.download(asset)\n",
        "\n",
        "def get_translation(key, language):\n",
        "       return translations.get(language, {}).get(key, key)  # Fallback to key if translation not found\n",
        "\n",
        "def welcome_animation():\n",
        "    st.markdown(\n",
        "        \"\"\"\n",
        "        <style>\n",
        "        @keyframes fadeIn {\n",
        "            0% { opacity: 0; }\n",
        "            100% { opacity: 1; }\n",
        "        }\n",
        "        .animated {\n",
        "            animation: fadeIn 2s ease-in-out;\n",
        "        }\n",
        "        </style>\n",
        "        <h1 class=\"animated\">Welcome to My Finance App!</h1>\n",
        "        \"\"\",\n",
        "        unsafe_allow_html=True,\n",
        "    )\n",
        "    time.sleep(2)\n",
        "\n",
        "    # Button to start the main app\n",
        "    if st.button(\"Start\"):\n",
        "        st.session_state.show_main = True  # Set session state to show main content\n",
        "    else:\n",
        "        st.stop() # Stop execution until button is clicked\n",
        "\n",
        "def language_selection():\n",
        "    st.write(\"## Language Selection\")  # Title for language selection\n",
        "\n",
        "    language_options = {\n",
        "        \"ðŸ‡ºðŸ‡¸ English\": \"en\",\n",
        "        \"ðŸ‡ªðŸ‡¸ EspaÃ±ol\": \"es\",\n",
        "    }\n",
        "    selected_emoji = st.selectbox(\n",
        "        \"Select Language / Selecciona el lenguaje\", list(language_options.keys())\n",
        "    )\n",
        "    selected_language = language_options[selected_emoji]\n",
        "\n",
        "    # Store selected language in session state\n",
        "    st.session_state.selected_language = selected_language\n",
        "\n",
        "    if st.button(\"Continue\"):\n",
        "        st.session_state.show_main = True  # Proceed to main app\n",
        "    else:\n",
        "        st.stop()  # Stop until \"Continue\" is clicked\n",
        "\n",
        "def main():\n",
        "\n",
        "    selected_language = st.session_state.selected_language\n",
        "\n",
        "    components = load_data()\n",
        "    title = st.empty()\n",
        "    st.sidebar.title(get_translation(\"Options\", selected_language))\n",
        "\n",
        "    def label(symbol):\n",
        "        a = components.loc[symbol]\n",
        "        return symbol + ' - ' + a.Security\n",
        "\n",
        "    if st.sidebar.checkbox(get_translation(\"View companies list\", selected_language)):\n",
        "        st.dataframe(components[['Security',\n",
        "                                 'GICS Sector',\n",
        "                                 'GICS Sub-Industry',\n",
        "                                 'Headquarters Location',\n",
        "                                 'Date added',\n",
        "                                 'CIK',\n",
        "                                 'Founded']])\n",
        "\n",
        "    st.sidebar.subheader('Select asset')\n",
        "    asset = st.sidebar.selectbox('Click below to select a new asset',\n",
        "                                 components.index.sort_values(), index=3,\n",
        "                                 format_func=label)\n",
        "    title.title(components.loc[asset].Security)\n",
        "    if st.sidebar.checkbox('View company info', True):\n",
        "        st.table(components.loc[asset])\n",
        "    data0 = load_quotes(asset)\n",
        "    data = data0.copy().dropna()\n",
        "    data.index.name = None\n",
        "\n",
        "    section = st.sidebar.slider('Number of quotes', min_value=30,\n",
        "                        max_value=min([2000, data.shape[0]]),\n",
        "                        value=500,  step=10)\n",
        "\n",
        "    data2 = data[-section:][['Adj Close']].copy() # Select the 'Adj Close' column and create a copy\n",
        "    data2.columns = ['Adj Close']  #Rename the column to 'Adj Close'\n",
        "\n",
        "    sma = st.sidebar.checkbox('SMA')\n",
        "    if sma:\n",
        "        period= st.sidebar.slider('SMA period', min_value=5, max_value=500,\n",
        "                             value=20,  step=1)\n",
        "        data[f'SMA {period}'] = data['Adj Close'].rolling(period ).mean()\n",
        "        data2[f'SMA {period}'] = data[f'SMA {period}'].reindex(data2.index)\n",
        "\n",
        "    sma2 = st.sidebar.checkbox('SMA2')\n",
        "    if sma2:\n",
        "        period2= st.sidebar.slider('SMA2 period', min_value=5, max_value=500,\n",
        "                             value=100,  step=1)\n",
        "        data[f'SMA2 {period2}'] = data['Adj Close'].rolling(period2).mean()\n",
        "        data2[f'SMA2 {period2}'] = data[f'SMA2 {period2}'].reindex(data2.index)\n",
        "\n",
        "    st.subheader('Chart')\n",
        "    st.line_chart(data2)\n",
        "\n",
        "    if st.sidebar.checkbox('View stadistic'):\n",
        "        st.subheader('Stadistic')\n",
        "        st.table(data2.describe())\n",
        "\n",
        "    if st.sidebar.checkbox('View quotes'):\n",
        "        st.subheader(f'{asset} historical data')\n",
        "        st.write(data2)\n",
        "\n",
        "    st.sidebar.title(\"About\")\n",
        "    st.sidebar.info('This app is a simple example of '\n",
        "                    'using Strealit to create a financial data web app.\\n'\n",
        "                    '\\nIt is maintained by [Paduel]('\n",
        "                    'https://twitter.com/paduel_py).\\n\\n'\n",
        "                    'Check the code at https://github.com/paduel/streamlit_finance_chart')\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    # Display welcome animation first\n",
        "    welcome_animation()\n",
        "\n",
        "    # Then show language selection\n",
        "    language_selection()\n",
        "\n",
        "    # Finally, run the main app if show_main is True\n",
        "    if st.session_state.get('show_main', False): # Check if show_main is True\n",
        "        main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KbP5hAfztkQL",
        "outputId": "c4d7c1a5-87a1-47ec-b56e-aaa9deca48e3"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2024-11-24 05:20:09.126 No runtime found, using MemoryCacheStorageManager\n",
            "2024-11-24 05:20:09.131 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:09.133 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.137 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.139 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.142 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.143 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.145 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.146 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.147 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.148 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.149 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.150 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.151 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.153 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.154 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.155 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.156 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.157 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.158 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.160 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.161 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.162 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.163 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.164 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.165 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.166 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:20:11.174 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# Load the data into the components variable\n",
        "components = load_data()\n",
        "\n",
        "# Now you can access components.columns\n",
        "print(components.columns)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W30zRDDj0lu0",
        "outputId": "44873b33-1dac-4a70-c836-5f2531a13978"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2024-11-24 05:18:06.484 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:18:06.486 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:18:06.489 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:18:06.493 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-24 05:18:06.494 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Security', 'GICS Sector', 'GICS Sub-Industry', 'Headquarters Location',\n",
            "       'Date added', 'CIK', 'Founded'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    }
  ]
}